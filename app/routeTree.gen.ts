/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ToolsLayoutRouteImport } from './routes/_toolsLayout/route'
import { Route as IndexImport } from './routes/index'
import { Route as ToolsLayoutGeneratorsUuidImport } from './routes/_toolsLayout/generators/uuid'
import { Route as ToolsLayoutGeneratorsPasswordImport } from './routes/_toolsLayout/generators/password'
import { Route as ToolsLayoutConvertersNumberBaseImport } from './routes/_toolsLayout/converters/number-base'
import { Route as ToolsLayoutConvertersJsonYamlImport } from './routes/_toolsLayout/converters/json-yaml'
import { Route as ToolsLayoutConvertersCronParserImport } from './routes/_toolsLayout/converters/cron-parser'

// Create/Update Routes

const ToolsLayoutRouteRoute = ToolsLayoutRouteImport.update({
  id: '/_toolsLayout',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ToolsLayoutGeneratorsUuidRoute = ToolsLayoutGeneratorsUuidImport.update({
  id: '/generators/uuid',
  path: '/generators/uuid',
  getParentRoute: () => ToolsLayoutRouteRoute,
} as any)

const ToolsLayoutGeneratorsPasswordRoute =
  ToolsLayoutGeneratorsPasswordImport.update({
    id: '/generators/password',
    path: '/generators/password',
    getParentRoute: () => ToolsLayoutRouteRoute,
  } as any)

const ToolsLayoutConvertersNumberBaseRoute =
  ToolsLayoutConvertersNumberBaseImport.update({
    id: '/converters/number-base',
    path: '/converters/number-base',
    getParentRoute: () => ToolsLayoutRouteRoute,
  } as any)

const ToolsLayoutConvertersJsonYamlRoute =
  ToolsLayoutConvertersJsonYamlImport.update({
    id: '/converters/json-yaml',
    path: '/converters/json-yaml',
    getParentRoute: () => ToolsLayoutRouteRoute,
  } as any)

const ToolsLayoutConvertersCronParserRoute =
  ToolsLayoutConvertersCronParserImport.update({
    id: '/converters/cron-parser',
    path: '/converters/cron-parser',
    getParentRoute: () => ToolsLayoutRouteRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_toolsLayout': {
      id: '/_toolsLayout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ToolsLayoutRouteImport
      parentRoute: typeof rootRoute
    }
    '/_toolsLayout/converters/cron-parser': {
      id: '/_toolsLayout/converters/cron-parser'
      path: '/converters/cron-parser'
      fullPath: '/converters/cron-parser'
      preLoaderRoute: typeof ToolsLayoutConvertersCronParserImport
      parentRoute: typeof ToolsLayoutRouteImport
    }
    '/_toolsLayout/converters/json-yaml': {
      id: '/_toolsLayout/converters/json-yaml'
      path: '/converters/json-yaml'
      fullPath: '/converters/json-yaml'
      preLoaderRoute: typeof ToolsLayoutConvertersJsonYamlImport
      parentRoute: typeof ToolsLayoutRouteImport
    }
    '/_toolsLayout/converters/number-base': {
      id: '/_toolsLayout/converters/number-base'
      path: '/converters/number-base'
      fullPath: '/converters/number-base'
      preLoaderRoute: typeof ToolsLayoutConvertersNumberBaseImport
      parentRoute: typeof ToolsLayoutRouteImport
    }
    '/_toolsLayout/generators/password': {
      id: '/_toolsLayout/generators/password'
      path: '/generators/password'
      fullPath: '/generators/password'
      preLoaderRoute: typeof ToolsLayoutGeneratorsPasswordImport
      parentRoute: typeof ToolsLayoutRouteImport
    }
    '/_toolsLayout/generators/uuid': {
      id: '/_toolsLayout/generators/uuid'
      path: '/generators/uuid'
      fullPath: '/generators/uuid'
      preLoaderRoute: typeof ToolsLayoutGeneratorsUuidImport
      parentRoute: typeof ToolsLayoutRouteImport
    }
  }
}

// Create and export the route tree

interface ToolsLayoutRouteRouteChildren {
  ToolsLayoutConvertersCronParserRoute: typeof ToolsLayoutConvertersCronParserRoute
  ToolsLayoutConvertersJsonYamlRoute: typeof ToolsLayoutConvertersJsonYamlRoute
  ToolsLayoutConvertersNumberBaseRoute: typeof ToolsLayoutConvertersNumberBaseRoute
  ToolsLayoutGeneratorsPasswordRoute: typeof ToolsLayoutGeneratorsPasswordRoute
  ToolsLayoutGeneratorsUuidRoute: typeof ToolsLayoutGeneratorsUuidRoute
}

const ToolsLayoutRouteRouteChildren: ToolsLayoutRouteRouteChildren = {
  ToolsLayoutConvertersCronParserRoute: ToolsLayoutConvertersCronParserRoute,
  ToolsLayoutConvertersJsonYamlRoute: ToolsLayoutConvertersJsonYamlRoute,
  ToolsLayoutConvertersNumberBaseRoute: ToolsLayoutConvertersNumberBaseRoute,
  ToolsLayoutGeneratorsPasswordRoute: ToolsLayoutGeneratorsPasswordRoute,
  ToolsLayoutGeneratorsUuidRoute: ToolsLayoutGeneratorsUuidRoute,
}

const ToolsLayoutRouteRouteWithChildren =
  ToolsLayoutRouteRoute._addFileChildren(ToolsLayoutRouteRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof ToolsLayoutRouteRouteWithChildren
  '/converters/cron-parser': typeof ToolsLayoutConvertersCronParserRoute
  '/converters/json-yaml': typeof ToolsLayoutConvertersJsonYamlRoute
  '/converters/number-base': typeof ToolsLayoutConvertersNumberBaseRoute
  '/generators/password': typeof ToolsLayoutGeneratorsPasswordRoute
  '/generators/uuid': typeof ToolsLayoutGeneratorsUuidRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof ToolsLayoutRouteRouteWithChildren
  '/converters/cron-parser': typeof ToolsLayoutConvertersCronParserRoute
  '/converters/json-yaml': typeof ToolsLayoutConvertersJsonYamlRoute
  '/converters/number-base': typeof ToolsLayoutConvertersNumberBaseRoute
  '/generators/password': typeof ToolsLayoutGeneratorsPasswordRoute
  '/generators/uuid': typeof ToolsLayoutGeneratorsUuidRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_toolsLayout': typeof ToolsLayoutRouteRouteWithChildren
  '/_toolsLayout/converters/cron-parser': typeof ToolsLayoutConvertersCronParserRoute
  '/_toolsLayout/converters/json-yaml': typeof ToolsLayoutConvertersJsonYamlRoute
  '/_toolsLayout/converters/number-base': typeof ToolsLayoutConvertersNumberBaseRoute
  '/_toolsLayout/generators/password': typeof ToolsLayoutGeneratorsPasswordRoute
  '/_toolsLayout/generators/uuid': typeof ToolsLayoutGeneratorsUuidRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/converters/cron-parser'
    | '/converters/json-yaml'
    | '/converters/number-base'
    | '/generators/password'
    | '/generators/uuid'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/converters/cron-parser'
    | '/converters/json-yaml'
    | '/converters/number-base'
    | '/generators/password'
    | '/generators/uuid'
  id:
    | '__root__'
    | '/'
    | '/_toolsLayout'
    | '/_toolsLayout/converters/cron-parser'
    | '/_toolsLayout/converters/json-yaml'
    | '/_toolsLayout/converters/number-base'
    | '/_toolsLayout/generators/password'
    | '/_toolsLayout/generators/uuid'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ToolsLayoutRouteRoute: typeof ToolsLayoutRouteRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ToolsLayoutRouteRoute: ToolsLayoutRouteRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_toolsLayout"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_toolsLayout": {
      "filePath": "_toolsLayout/route.tsx",
      "children": [
        "/_toolsLayout/converters/cron-parser",
        "/_toolsLayout/converters/json-yaml",
        "/_toolsLayout/converters/number-base",
        "/_toolsLayout/generators/password",
        "/_toolsLayout/generators/uuid"
      ]
    },
    "/_toolsLayout/converters/cron-parser": {
      "filePath": "_toolsLayout/converters/cron-parser.tsx",
      "parent": "/_toolsLayout"
    },
    "/_toolsLayout/converters/json-yaml": {
      "filePath": "_toolsLayout/converters/json-yaml.tsx",
      "parent": "/_toolsLayout"
    },
    "/_toolsLayout/converters/number-base": {
      "filePath": "_toolsLayout/converters/number-base.tsx",
      "parent": "/_toolsLayout"
    },
    "/_toolsLayout/generators/password": {
      "filePath": "_toolsLayout/generators/password.tsx",
      "parent": "/_toolsLayout"
    },
    "/_toolsLayout/generators/uuid": {
      "filePath": "_toolsLayout/generators/uuid.tsx",
      "parent": "/_toolsLayout"
    }
  }
}
ROUTE_MANIFEST_END */
